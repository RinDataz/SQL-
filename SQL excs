-- SQL Crash course
-- basics revision 
create table bands(
    test_col INT
);

alter table bands 
add bName VARCHAR2(29);

INSERT INTO BANDS (test_col,bName) values (12,'BOP');

SELECT*FROM BANDS;

ALTER TABLE BANDS
DROP COLUMN TEST_COL;

ALTER TABLE BANDS
ADD PRIMARY KEY (BNAME);

ALTER TABLE BANDS
DROP PRIMARY KEY;

DROP TABLE BANDS;


-- PL ex

-- Labs 

-- lab 1
CREATE TABLE ORDERS_COPY AS SELECT* FROM OE.ORDERS;
SELECT*FROM ORDERS_COPY;

--CONVERT TO CAPITAL LETTERS
UPDATE ORDERS_COPY
SET ORDER_MODE = UPPER(ORDER_MODE);
SELECT *FROM ORDERS_COPY;

SELECT COUNT(*) FROM ORDERS_COPY;
SELECT COUNT(*) FROM ORDERS_COPY
    WHERE SALES_REP_ID IS NULL;

SELECT * FROM ORDERS_COPY
    WHERE SALES_REP_ID IS NULL;

UPDATE ORDERS_COPY
SET SALES_REP_ID = 999
WHERE SALES_REP_ID IS NULL;

SELECT COUNT(PROMOTION_ID) FROM ORDERS_COPY;

UPDATE ORDERS_COPY 
SET PROMOTION_ID = 0
WHERE PROMOTION_ID IS NULL;

-- LAB 1 DONE
--lab2

select* from oe.product_information;
-- the decode function 
SELECT UNIQUE WEIGHT_CLASS,
	DECODE (WEIGHT_CLASS,1,'VERY HEAVY',2,'HEAVY',3,'MEDIUM',4,'LIGHT',5,'VERY LIGHT') AS WEIGHT_DESCRIPTION 
FROM oe.product_information
ORDER BY WEIGHT_CLASS ASC;

-- prac tab will be deleted
CREATE TABLE PROD_COPY AS SELECT* FROM oe.product_information;

ALTER TABLE PROD_COPY 
ADD WEIGHT_DESCRIPTION VARCHAR(39);

SELECT* FROM PROD_COPY;

-- using decode to actully store the values in a colmun 
UPDATE PROD_COPY 
 	SET WEIGHT_DESCRIPTION = DECODE (WEIGHT_CLASS,1,'VERY HEAVY',2,'HEAVY',3,'MEDIUM',4,'LIGHT',5,'VERY LIGHT')
WHERE WEIGHT_DESCRIPTION IS NULL;

ALTER TABLE PROD_COPY 
    ADD WEIGHT_CLASS_DESCRIPTION VARCHAR(44);

UPDATE PROD_COPY
SET WEIGHT_CLASS_DESCRIPTION = (WEIGHT_CLASS|| '-' || WEIGHT_DESCRIPTION);

SELECT WEIGHT_CLASS_DESCRIPTION FROM PROD_COPY;

-- LAB 2 END 

-- Lab 3
CREATE TABLE PRODUCT_COPY (PRODUCT_ID, PRODUCT_NAME, CATEGORY_ID, SUPPLIER_ID) 
    AS 
    SELECT PRODUCT_ID, PRODUCT_NAME, CATEGORY_ID, SUPPLIER_ID 
    FROM OE.PRODUCT_INFORMATION;

CREATE TABLE CATEGORY_COPY AS SELECT*FROM OE.CATEGORIES_TAB;

CREATE TABLE T_PRODUCT 
    AS SELECT
    PC.PRODUCT_ID,
	PC.PRODUCT_NAME,
	PC.CATEGORY_ID,
	CC.CATEGORY_NAME,
	PC.SUPPLIER_ID 
    FROM PRODUCT_COPY PC
 JOIN CATEGORY_COPY CC ON PC.CATEGORY_ID= CC.CATEGORY_ID;

SELECT*FROM T_PRODUCT;


CREATE TABLE ORDERS_DIRECT 
AS SELECT  
    ORDER_ID, ORDER_DATE, ORDER_MODE, SALES_REP_ID
FROM OE.ORDERS 
WHERE ORDER_MODE='direct' AND SALES_REP_ID IS NOT NULL;


DROP TABLE ORDERS_DIRECT;
SELECT * FROM ORDERS_DIRECT;

select*from ORDERS_DIRECT
WHERE ORDER_MODE!='direct' OR SALES_REP_ID IS NULL;

ALTER TABLE ORDERS_DIRECT
DROP COLUMN ORDER_MODE;


CREATE TABLE ORDER_ONLINE 
AS SELECT ORDER_ID, ORDER_DATE, ORDER_MODE, SALES_REP_ID
    FROM OE.ORDERS
WHERE ORDER_MODE='online';
DROP TABLE ORDER_ONLINE;

SELECT*FROM ORDER_ONLINE;

ALTER TABLE ORDER_ONLINE
DROP COLUMN ORDER_MODE;

ALTER TABLE ORDER_ONLINE
DROP COLUMN SALES_REP_ID;

SELECT*FROM ORDER_ONLINE;


CREATE TABLE CUST_MALE
AS SELECT
    CUSTOMER_ID,
    CUST_FIRST_NAME,
    GENDER,
    NLS_TERRITORY
    FROM OE.CUSTOMERS
WHERE GENDER='M' ;

SELECT* FROM CUST_MALE;

CREATE TABLE CUST_FEMALE
AS SELECT
    CUSTOMER_ID,
    CUST_FIRST_NAME,
    GENDER,
    NLS_TERRITORY
    FROM OE.CUSTOMERS
WHERE GENDER='F' ;

SELECT* FROM CUST_FEMALE;


CREATE TABLE ALL_CUST
AS 
    SELECT*FROM CUST_FEMALE UNION SELECT*FROM CUST_MALE ;

SELECT*FROM ALL_CUST;

-- LAB3 END 

-- Lab4 start
CREATE TABLE CUSTOMER_COPY AS SELECT
CUSTOMER_ID, CUST_FIRST_NAME, CUST_LAST_NAME, NLS_LANGUAGE,
NLS_TERRITORY, CREDIT_LIMIT, CUST_EMAIL, ACCOUNT_MGR_ID,
CUST_GEO_LOCATION, DATE_OF_BIRTH, MARITAL_STATUS, GENDER, INCOME_LEVEL 
FROM OE.CUSTOMERS;

SELECT*FROM CUSTOMER_COPY;

ALTER TABLE CUSTOMER_COPY
ADD TURNOVER NUMBER(12,1);

UPDATE CUSTOMER_COPY CC
SET TURNOVER = (SELECT SUM(ORDER_TOTAL)
    FROM OE.ORDERS O
    WHERE O.CUSTOMER_ID=CC.CUSTOMER_ID);

SELECT*FROM CUSTOMER_COPY;

ALTER TABLE CUSTOMER_COPY
ADD CUST_TYPE CHAR(1);


-- PL SQL

DECLARE 
-- the varibles we will need to move through the block
    AVG_TO NUMBER(12,1);
BEGIN 
	SELECT AVG(TURNOVER)INTO AVG_TO FROM CUSTOMER_COPY;
-- THE VARIBLE WE WILL DO CHANGES DEPENDING ON
FOR Cust IN (SELECT CUSTOMER_ID, TURNOVER FROM CUSTOMER_COPY) LOOP 
    IF Cust.TURNOVER >= AVG_TO THEN  
      UPDATE CUSTOMER_COPY 
      SET CUST_TYPE ='A' 
      WHERE CUSTOMER_ID = Cust.CUSTOMER_ID; 
    ELSIF 0.5 * AVG_TO <= Cust.TURNOVER AND Cust.TURNOVER < AVG_TO THEN 
      UPDATE CUSTOMER_COPY 
      SET CUST_TYPE ='B' 
      WHERE CUSTOMER_ID = Cust.CUSTOMER_ID; 
    ELSE  
      UPDATE CUSTOMER_COPY 
      SET CUST_TYPE ='C' 
      WHERE CUSTOMER_ID = Cust.CUSTOMER_ID; 
    END IF; 
  END LOOP; 
END; 

SELECT CUST_TYPE ,COUNT(*)AS NUMBERS FROM CUSTOMER_COPY 
GROUP BY CUST_TYPE;

--lab7
CREATE TABLE T_ORDER_DATE AS SELECT DISTINCT TO_CHAR(ORDER_DATE,'DD-MM
YYYY')AS ORDER_DATE 
FROM OE.ORDERS; 
SELECT*FROM T_ORDER_DATE; 
 
CREATE TABLE T_DATE (  
ID_DATE NUMBER(5), 
ORDER_DATE DATE,  
Day_No NUMBER(1),  
Day_Name CHAR(10),  
Month_NO NUMBER(2),  
Month_Name CHAR(10),  
Quarter NUMBER(1),  
YYear NUMBER(4)  
); 
 
CREATE SEQUENCE SEQ_ID_DATE START WITH 10000;  
 
INSERT INTO T_DATE 
SELECT SEQ_ID_DATE.NEXTVAL, 
    TO_DATE(ORDER_DATE,'DD-MM-YYYY') AS ORDER_DATE, 
 TO_NUMBER(TO_CHAR(TO_DATE(ORDER_DATE,'DD-MM-YYYY'),'D')) AS DAY_NO, 
 UPPER(TO_CHAR(TO_DATE(ORDER_DATE,'DD-MM-YYYY'),'Day'))AS Day_Name,  
 TO_NUMBER(TO_CHAR(TO_DATE(ORDER_DATE,'DD-MM-YYYY'),'MM'))AS 
Month_NO,  
 UPPER(TO_CHAR(TO_DATE(ORDER_DATE,'DD-MM-YYYY'),'Month'))AS Month_Name,  
 TO_NUMBER(TO_CHAR(TO_DATE(ORDER_DATE,'DD-MM-YYYY'),'Q'))AS Quarter,  
 TO_NUMBER(TO_CHAR(TO_DATE(ORDER_DATE,'DD-MM-YYYY'),'YYYY'))AS YYear 
FROM T_ORDER_DATE; 
 
SELECT*FROM T_DATE; 
 -- Cust copy lab 4 
CREATE TABLE CUSTOMER_COPY AS 
SELECT CUSTOMER_ID, CUST_FIRST_NAME, CUST_LAST_NAME, NLS_LANGUAGE, 
NLS_TERRITORY, 
CREDIT_LIMIT, CUST_EMAIL, ACCOUNT_MGR_ID, CUST_GEO_LOCATION, 
DATE_OF_BIRTH, 
MARITAL_STATUS, GENDER, INCOME_LEVEL 
FROM OE.CUSTOMERS; 
 -- orders_copy lab 1 
CREATE TABLE ORDERS_COPY AS SELECT*FROM OE.ORDERS; 
 -- Q1 
CREATE TABLE T_SALESMAN AS SELECT DISTINCT COALESCE(SALES_REP_ID,999)AS 
SALES_REP_ID, 
 'NAME-' || TO_CHAR(COALESCE(SALES_REP_ID,999)) AS SNAME 
FROM ORDERS_COPY; 
 
SELECT*FROM T_SALESMAN ORDER BY SALES_REP_ID; 
 -- Q2 -- D_TIME 
CREATE TABLE D_TIME AS  
SELECT DISTINCT ID_DATE,ORDER_DATE,Month_No,Quarter,YYear 
FROM T_DATE; 
 
ALTER TABLE D_TIME ADD CONSTRAINT PK_D_TIME PRIMARY KEY(ID_DATE); 
 -- D_ORDERS 
CREATE TABLE D_ORDERS AS  
SELECT DISTINCT ORDER_ID,ORDER_MODE AS OMode,ORDER_STATUS AS STATUS 
FROM ORDERS_COPY; 
 
ALTER TABLE D_ORDERS ADD CONSTRAINTS PK_D_ORDERS PRIMARY KEY (ORDER_ID); 
 
SELECT * FROM D_TIME; 
 -- D_SALESMAN  
CREATE TABLE D_SALESMAN AS  
SELECT DISTINCT SALES_REP_ID,SNAME 
FROM T_SALESMAN; 
 
ALTER TABLE D_SALESMAN ADD CONSTRAINTS PK_D_SALESMAN PRIMARY KEY 
(SALES_REP_ID); 
SELECT * FROM D_SALESMAN; 
 -- D_CUSTOMERS 
CREATE TABLE D_CUSTOMERS AS  
SELECT DISTINCT CUSTOMER_ID, CUST_FIRST_NAME, CUST_LAST_NAME, 
NLS_LANGUAGE, NLS_TERRITORY, 
CREDIT_LIMIT, CUST_EMAIL, ACCOUNT_MGR_ID, DATE_OF_BIRTH, 
MARITAL_STATUS, GENDER, INCOME_LEVEL 
FROM CUSTOMER_COPY; 
 
ALTER TABLE D_CUSTOMERS ADD CONSTRAINTS PK_D_CUSTOMERS PRIMARY KEY 
(CUSTOMER_ID); 
SELECT * FROM D_CUSTOMERS;
--lab8
--Q1 
CREATE TABLE F_ORDERS ( 
    F_ORDERS_ID NUMBER, 
    ORDER_AMOUNT NUMBER, 
    D_TIME_ID NUMBER, 
    D_CUSTOMER_ID NUMBER, 
    D_ORDERS_ID NUMBER, 
    D_SALESMAN_ID NUMBER 
     
); 
 
 --Q2 
ALTER TABLE F_ORDERS ADD CONSTRAINT PK_F_ORDERS_ID PRIMARY KEY (F_ORDERS_ID); 
 --Q3 
ALTER TABLE F_ORDERS 
ADD CONSTRAINT FK_ORDERS_TO_D_TIME FOREIGN KEY (D_TIME_ID) REFERENCES 
D_TIME(ID_DATE); 
 
ALTER TABLE F_ORDERS 
ADD CONSTRAINT FK_ORDERS_TO_D_CUSTOMERS FOREIGN KEY (D_CUSTOMER_ID) 
REFERENCES D_CUSTOMERS(CUSTOMER_ID); 
 
ALTER TABLE F_ORDERS 
ADD CONSTRAINT FK_ORDERS_TO_D_SALESMAN FOREIGN KEY (D_SALESMAN_ID) REFERENCES 
D_SALESMAN(SALES_REP_ID); 
 
ALTER TABLE F_ORDERS 
ADD CONSTRAINT FK_ORDERS_TO_D_ORDERS FOREIGN KEY (D_ORDERS_ID) REFERENCES 
D_ORDERS(ORDER_ID); 
 --Q4 
CREATE SEQUENCE SEQ_F_ORDERS START WITH 1; 
 -- Q5 
INSERT INTO F_ORDERS (F_ORDERS_ID,ORDER_AMOUNT, D_ORDERS_ID,D_CUSTOMER_ID) 
SELECT  SEQ_F_ORDERS.nextval , ORDER_TOTAL, ORDER_ID,  CUSTOMER_ID  FROM 
ORDERS_COPY; 
 
 
    UPDATE F_ORDERS o 
    SET D_SALESMAN_ID = (SELECT (D_SALESMAN.SALES_REP_ID)  
    FROM 
    D_SALESMAN JOIN orders_copy oc 
    ON  D_SALESMAN.SALES_REP_ID = oc.SALES_REP_ID  
    AND oc.order_id=o.F_ORDERS_ID); 
 
 --Q6 
SELECT SUM(ORDER_AMOUNT) FROM F_ORDERS; 
 --Q7 
 SELECT F_ORDERS.D_CUSTOMER_ID ,CUST_FIRST_NAME, sum(ORDER_AMOUNT) AS 
TurnOver 
    from D_CUSTOMERS c join F_ORDERS  
    on c.CUSTOMER_ID = F_ORDERS.D_CUSTOMER_ID 
    GROUP BY F_ORDERS.D_CUSTOMER_ID,CUST_FIRST_NAME ; 
 
--Q8 
SELECT COUNT(*) AS total_orders  
FROM F_ORDERS  
WHERE ORDER_AMOUNT > 100; 
 
 --Q9 
SELECT 
    ROUND((SUM(CASE WHEN DO.OMode = 'direct' THEN FO.ORDER_AMOUNT ELSE 0 END) / 
SUM(FO.ORDER_AMOUNT)) * 100) AS Direct_Percentage, 
    ROUND((SUM(CASE WHEN DO.OMode = 'online' THEN FO.ORDER_AMOUNT ELSE 0 END) / 
SUM(FO.ORDER_AMOUNT)) * 100) AS Online_Percentage 
FROM F_ORDERS FO 
JOIN D_ORDERS DO ON FO.D_ORDERS_ID = DO.ORDER_ID; 
 --11 
SELECT 
    D_TIME_ID, 
    D_CUSTOMER_ID, 
    D_ORDERS_ID, 
    SUM(ORDER_AMOUNT) AS TOTAL_ORDER_AMOUNT 
FROM 
    F_ORDERS 
GROUP BY 
    D_TIME_ID, 
    D_CUSTOMER_ID, 
    D_ORDERS_ID; 
-- LAB 9

-- Develop a SELECT statement to count the number of DIRECT Orders having Order_Amount  â‰¥ a given value (choose a value from the table).
SELECT*FROM D_ORDERS;

SELECT COUNT(*) FROM 
    D_ORDERS JOIN F_ORDERS 
    ON D_ORDERS.ORDER_ID= F_ORDERS.D_ORDERS_ID
    WHERE D_ORDERS.OMODE='direct' AND F_ORDERS.ORDER_AMOUNT>=90 ;

--Develop a SQL statement to add the parameter OMode as a column (with the same name) in the F_ORDERS fact table
ALTER TABLE F_ORDERS
ADD OMODE VARCHAR2(20);

--Populate the new column OMode from the D_ORDERS dimension. 
UPDATE F_ORDERS
SET OMODE = (SELECT OMODE FROM D_ORDERS
WHERE F_ORDERS.D_ORDERS_ID= D_ORDERS.ORDER_ID);

SELECT*FROM F_ORDERS;


ALTER TABLE F_ORDERS
ADD(DIRECT_ORDERS CHAR(1), ONLINE_ORDER CHAR(1))

UPDATE F_ORDERS
SET 
ONLINE_ORDER= CASE WHEN OMODE='online' THEN '1' ELSE '0' END;
DIRECT_ORDERS = CASE WHEN OMODE='direct' THEN '1' ELSE '0' END;
SELECT*FROM F_ORDERS;

-- lab 10
-- Display the Number of Orders in the D_ORDERS table.
SELECT COUNT(*) FROM D_ORDERS;

SELECT COUNT(*) FROM F_ORDERS;

SELECT*FROM F_ORDERS;
--Display the Lowest, Highest and Average Amount of all Orders
SELECT  
    MIN(ORDER_AMOUNT) AS MINN,
    MAX(ORDER_AMOUNT) AS MAXX, 
    AVG(ORDER_AMOUNT) AS AVGG
FROM F_ORDERS;

SELECT D_CUSTOMER_ID, 
    MIN(ORDER_AMOUNT) AS LOWEST ,
    MAX(ORDER_AMOUNT) AS HIGHEST,
    AVG(ORDER_AMOUNT) AS AVGG
FROM F_ORDERS
    GROUP BY D_CUSTOMER_ID ;

SELECT* FROM D_CUSTOMERS;

SELECT CUSTOMER_ID,	CUST_FIRST_NAME
    FROM F_ORDERS JOIN D_CUSTOMERS
    ON D_CUSTOMERS.CUSTOMER_ID = F_ORDERS.D_CUSTOMER_ID
    GROUP BY CUSTOMER_ID,CUST_FIRST_NAME
HAVING AVG(F_ORDERS.ORDER_AMOUNT)> 2*(SELECT AVG(ORDER_AMOUNT)FROM F_ORDERS);
